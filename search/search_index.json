{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"index.html","title":"Start","text":""},{"location":"index.html#introduction","title":"Introduction","text":"<p>This is a sample project to execute a shell command on a remote PC. The remote command is executed with a Python script that connects via OPC UA to the B&amp;R PLC. The PLC only needs the variable structure to execute a command and some code to indicate the connection status. The sample uses a mappView visualization for demo purpose but mappView is not required to run the sample. </p> <p>The variable structure mappRemoteShell has the following members:</p> Variable Description execute Starts the remote command. The Python script resets this variable when the command is finished. command The shell command string that is excecuted on the remote PC alive_counter This counter is used to detect the connection state connected Indicates that the remote PC is connected and ready to receive a command status The status of the command <p>The following status codes show the state of the command</p> Code Description 65535 The command is still busy 10000 Generic command error 10001 The command was not found 10002 The response data is larger than the response string on the PLC 0 The command was successful <p>Python Script</p> <p>PLC UI</p> <p>The Python script can run on any system that supports the Python framework. The logger gives a detailed feedback about the connection status and executed command. The option for balloon messages will show a notification every time a command is executed. Auto reconnect will automatically connect when the script is started or when the connection was interrupted. Start minimized will put the application into the system tray on startup. If the command produces response data the script will transfer this data back to PLC. If the command generates an error the error message will be sent back as response to the PLC.</p>"},{"location":"index.html#requirements","title":"Requirements","text":"<ul> <li>Automation Studio 4.7</li> <li>Automation Runtime C4.72</li> <li>Python 3.8 or higher</li> </ul> <p>Recommended task class is #8 with a 10ms cycle time.</p>"},{"location":"import.html","title":"PLC Import","text":"<p>This guide shows how to import the demo project into an existing project. The screenshots can look slightly different depending on the version used.</p>"},{"location":"import.html#copy-task-to-new-project","title":"Copy task to new project","text":"<p>Open the demo project and the exiting project side by side. Go to the logical view in both projects.   </p> <p>             Copy the package mappRemoteShell from the demo project.          <p>             Paste the task into the existing project at the top.          <p>             Assign the new task to the CPU.             The task is assign to task class #4 by default.             Recommended task class is #8."},{"location":"import.html#enable-opc-ua-configuration","title":"Enable OPC UA configuration","text":"<p>Make sure that the OPC UA server is enabled. See Automation Studio help for more details.</p> <ol> <li>Switch to the configuration view in the existing project and open the OPC UA configuration</li> <li> <p>Select the variable \u201cmappRemoteShell\u201d, If the variables does not show up, save and compile the project, then reopen the window</p> </li> <li> <p>Enable the variables with the green checkmark</p> </li> <li>Set \u201cAutomatic Enable\u201d to true in the properties window</li> </ol>"},{"location":"import.html#start-the-python-script","title":"Start the python script","text":"<p>To start the python script switch to the logical view.   </p> <p>             Right click on the script folder andselect \"Open with Explorer\"          <p>             Double click on the file start.pyw"},{"location":"installation.html","title":"PC Installation","text":"<p>Download and install Python from https://www.python.org/</p> <p>Start the installation, set checkboxes, customize installation, restart the system to make sure that the path information are in affect.</p> <p>Open a command window and execute the following commands to install the required packages</p> <ul> <li>pip3 install PyQt5</li> <li>pip3 install asyncua</li> <li>pip3 install timeloop</li> <li>pip3 install ConfigParser</li> </ul> <p>Copy the folder \\Logical\\mappRemoteShell\\PythonScript to the target PC. Change the config.ini file as needed.</p> <p>Run the file start.pyw from the PythonScript folder</p>"},{"location":"revision.html","title":"Revision","text":""},{"location":"revision.html#version-09","title":"Version 0.9","text":"<ul> <li>Update Automation Studio to 4.12</li> <li>Update mapp to 5.24</li> <li>Create config.ini if it does not exist</li> <li>Identify variable namespace dynamically</li> </ul>"},{"location":"revision.html#version-08","title":"Version 0.8","text":"<ul> <li>Python Script: Better error handling with hypervisor systems and automatic reconnect</li> </ul>"},{"location":"revision.html#version-07","title":"Version 0.7","text":"<ul> <li>Python Script: Better error handling when OPC UA variable has no permission to write</li> </ul>"},{"location":"revision.html#version-06","title":"Version 0.6","text":"<ul> <li>Python Script: Improved command variable identification</li> </ul>"},{"location":"revision.html#version-05","title":"Version 0.5","text":"<ul> <li>Python Script: Better error handling when task or variable dont exist on PLC</li> <li>New documentation</li> </ul>"},{"location":"revision.html#version-04","title":"Version 0.4","text":"<ul> <li>Python Script: Added task and variable name to config.ini</li> <li>Python Script: Added ip and port to config.ini</li> <li>Python Script: Switched to new asyncua library</li> <li>Automation Studio: Update sample to mapp 5.15</li> </ul>"},{"location":"revision.html#version-03","title":"Version 0.3","text":"<ul> <li>Support for command response to PLC</li> <li>Detailed error text when command fails to PLC</li> <li>Python window is now resizable</li> <li>Bug fixes and code cleanup</li> </ul>"},{"location":"revision.html#version-01","title":"Version 0.1","text":"<ul> <li>First release</li> </ul>"},{"location":"wiki.html","title":"Wiki","text":""},{"location":"wiki.html#sample-commands","title":"Sample Commands","text":"<p>Here are a few examples that can be used as a command string.</p> <ul> <li>Start Windows file explorer <code>explorer.exe</code></li> <li>Start Automation Studio <code>C:\\BrAutomation\\AS47\\Bin-en\\AutomationStudio.exe</code></li> <li>Start Power Shell script with parameter <code>powershell C:\\Temp\\GoogleRoute.ps1</code> </li> <li>Kill chrome browser <code>taskkill /F /IM chrome.exe</code></li> <li>Shutdown Windows <code>powershell shutdown /s</code> </li> <li>Restart Windows <code>powershell shutdown /r</code> </li> </ul>"},{"location":"wiki.html#sample-time-zone-synchronization","title":"Sample Time Zone Synchronization","text":"<p>This branch shows how to sync the time zone of a windows PC to the PLC. It uses the shell command \"tzutil /g\" to read the time zone information. Folow this link to the branch https://github.com/br-automation-com/mappRemoteShell/tree/time_zone</p> <p>The time zone samples uses the following variables:</p> Variable Description cmdReadTimeZone Gets the current time zone from the PLC. cmdSyncTimeZone Gets the windows time zone and sets the same time zone on the PLC. plcTimeZone PLC time zone ID. See help file (875a2145-4257-45c4-8fa7-197b095caadd) for details. winTimeZone Windows time zone information. See documentation for shell command tzutil for more details."},{"location":"wiki.html#change-task-name-or-variable","title":"Change task name or variable","text":"<p>In some cases it can be neccessary to change the task or variable struture names. This can be the case if the script should control more than one PC. In this case the task must be duplicated.</p>"},{"location":"wiki.html#duplicate-task","title":"Duplicate task","text":"<p>             Rename the existing task mpRemote to mpRemote1.The copy and paste the task at the same location.This should automatically create mpRemote2.          <p>             Switch to the physical view and add the task mpRemote2."},{"location":"wiki.html#change-opc-ua-configuration","title":"Change OPC UA configuration","text":"<p>Make sure that the OPC UA server is enabled. See Automation Studio help for more details.</p> <ol> <li>Switch to the configuration view in the existing project and open the OPC UA configuration</li> <li> <p>Select the variable \u201cmappRemoteShell\u201d in mpReamote1 and mpRemote2, If the variables does not show up, save and compile the project, then reopen the window</p> </li> <li> <p>Enable the variables with the green checkmark</p> </li> <li>Set \u201cAutomatic Enable\u201d to true in the properties window</li> <li>If the old task mpRemote still exists in the OPC configuration delete it</li> </ol>"},{"location":"wiki.html#change-the-python-script-configuration","title":"Change the Python script configuration","text":"<p>To change the Python script configuration switch to the logical view.</p> <p>             Right click on the script folder andselect \"Open with Explorer\".          <p>             Open the file config.ini and change the parameter task to new task name mpRemote1 on the first PC and to mpRemote2 on the second PC."}]}